/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedMessageService } from "../processedMessage.service";
import { ProcessedMessageCreateInput } from "./ProcessedMessageCreateInput";
import { ProcessedMessage } from "./ProcessedMessage";
import { ProcessedMessageFindManyArgs } from "./ProcessedMessageFindManyArgs";
import { ProcessedMessageWhereUniqueInput } from "./ProcessedMessageWhereUniqueInput";
import { ProcessedMessageUpdateInput } from "./ProcessedMessageUpdateInput";

export class ProcessedMessageControllerBase {
  constructor(protected readonly service: ProcessedMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedMessage })
  async createProcessedMessage(
    @common.Body() data: ProcessedMessageCreateInput
  ): Promise<ProcessedMessage> {
    return await this.service.createProcessedMessage({
      data: {
        ...data,

        message: data.message
          ? {
              connect: data.message,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        processedAt: true,

        message: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedMessage] })
  @ApiNestedQuery(ProcessedMessageFindManyArgs)
  async processedMessages(
    @common.Req() request: Request
  ): Promise<ProcessedMessage[]> {
    const args = plainToClass(ProcessedMessageFindManyArgs, request.query);
    return this.service.processedMessages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        processedAt: true,

        message: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedMessage(
    @common.Param() params: ProcessedMessageWhereUniqueInput
  ): Promise<ProcessedMessage | null> {
    const result = await this.service.processedMessage({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        processedAt: true,

        message: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedMessage(
    @common.Param() params: ProcessedMessageWhereUniqueInput,
    @common.Body() data: ProcessedMessageUpdateInput
  ): Promise<ProcessedMessage | null> {
    try {
      return await this.service.updateProcessedMessage({
        where: params,
        data: {
          ...data,

          message: data.message
            ? {
                connect: data.message,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          processedAt: true,

          message: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedMessage(
    @common.Param() params: ProcessedMessageWhereUniqueInput
  ): Promise<ProcessedMessage | null> {
    try {
      return await this.service.deleteProcessedMessage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          processedAt: true,

          message: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
