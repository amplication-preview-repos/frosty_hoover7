/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProcessedMessage as PrismaProcessedMessage,
  Message as PrismaMessage,
} from "@prisma/client";

export class ProcessedMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedMessage.count(args);
  }

  async processedMessages(
    args: Prisma.ProcessedMessageFindManyArgs
  ): Promise<PrismaProcessedMessage[]> {
    return this.prisma.processedMessage.findMany(args);
  }
  async processedMessage(
    args: Prisma.ProcessedMessageFindUniqueArgs
  ): Promise<PrismaProcessedMessage | null> {
    return this.prisma.processedMessage.findUnique(args);
  }
  async createProcessedMessage(
    args: Prisma.ProcessedMessageCreateArgs
  ): Promise<PrismaProcessedMessage> {
    return this.prisma.processedMessage.create(args);
  }
  async updateProcessedMessage(
    args: Prisma.ProcessedMessageUpdateArgs
  ): Promise<PrismaProcessedMessage> {
    return this.prisma.processedMessage.update(args);
  }
  async deleteProcessedMessage(
    args: Prisma.ProcessedMessageDeleteArgs
  ): Promise<PrismaProcessedMessage> {
    return this.prisma.processedMessage.delete(args);
  }

  async getMessage(parentId: string): Promise<PrismaMessage | null> {
    return this.prisma.processedMessage
      .findUnique({
        where: { id: parentId },
      })
      .message();
  }
}
