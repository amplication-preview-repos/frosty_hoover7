/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedMessage } from "./ProcessedMessage";
import { ProcessedMessageCountArgs } from "./ProcessedMessageCountArgs";
import { ProcessedMessageFindManyArgs } from "./ProcessedMessageFindManyArgs";
import { ProcessedMessageFindUniqueArgs } from "./ProcessedMessageFindUniqueArgs";
import { CreateProcessedMessageArgs } from "./CreateProcessedMessageArgs";
import { UpdateProcessedMessageArgs } from "./UpdateProcessedMessageArgs";
import { DeleteProcessedMessageArgs } from "./DeleteProcessedMessageArgs";
import { Message } from "../../message/base/Message";
import { ProcessedMessageService } from "../processedMessage.service";
@graphql.Resolver(() => ProcessedMessage)
export class ProcessedMessageResolverBase {
  constructor(protected readonly service: ProcessedMessageService) {}

  async _processedMessagesMeta(
    @graphql.Args() args: ProcessedMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedMessage])
  async processedMessages(
    @graphql.Args() args: ProcessedMessageFindManyArgs
  ): Promise<ProcessedMessage[]> {
    return this.service.processedMessages(args);
  }

  @graphql.Query(() => ProcessedMessage, { nullable: true })
  async processedMessage(
    @graphql.Args() args: ProcessedMessageFindUniqueArgs
  ): Promise<ProcessedMessage | null> {
    const result = await this.service.processedMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedMessage)
  async createProcessedMessage(
    @graphql.Args() args: CreateProcessedMessageArgs
  ): Promise<ProcessedMessage> {
    return await this.service.createProcessedMessage({
      ...args,
      data: {
        ...args.data,

        message: args.data.message
          ? {
              connect: args.data.message,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProcessedMessage)
  async updateProcessedMessage(
    @graphql.Args() args: UpdateProcessedMessageArgs
  ): Promise<ProcessedMessage | null> {
    try {
      return await this.service.updateProcessedMessage({
        ...args,
        data: {
          ...args.data,

          message: args.data.message
            ? {
                connect: args.data.message,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedMessage)
  async deleteProcessedMessage(
    @graphql.Args() args: DeleteProcessedMessageArgs
  ): Promise<ProcessedMessage | null> {
    try {
      return await this.service.deleteProcessedMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Message, {
    nullable: true,
    name: "message",
  })
  async getMessage(
    @graphql.Parent() parent: ProcessedMessage
  ): Promise<Message | null> {
    const result = await this.service.getMessage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
